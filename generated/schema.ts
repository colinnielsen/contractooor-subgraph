// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AgreementInitiated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AgreementInitiated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AgreementInitiated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AgreementInitiated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): AgreementInitiated | null {
    return changetype<AgreementInitiated | null>(
      store.get("AgreementInitiated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get agreementGUID(): Bytes {
    let value = this.get("agreementGUID");
    return value!.toBytes();
  }

  set agreementGUID(value: Bytes) {
    this.set("agreementGUID", Value.fromBytes(value));
  }

  get contractooorAgreement(): Bytes {
    let value = this.get("contractooorAgreement");
    return value!.toBytes();
  }

  set contractooorAgreement(value: Bytes) {
    this.set("contractooorAgreement", Value.fromBytes(value));
  }

  get streamId(): BigInt {
    let value = this.get("streamId");
    return value!.toBigInt();
  }

  set streamId(value: BigInt) {
    this.set("streamId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AgreementProposed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AgreementProposed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AgreementProposed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AgreementProposed", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): AgreementProposed | null {
    return changetype<AgreementProposed | null>(
      store.get("AgreementProposed", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get agreement(): Bytes {
    let value = this.get("agreement");
    return value!.toBytes();
  }

  set agreement(value: Bytes) {
    this.set("agreement", Value.fromBytes(value));
  }

  get agreementGUID(): Bytes {
    let value = this.get("agreementGUID");
    return value!.toBytes();
  }

  set agreementGUID(value: Bytes) {
    this.set("agreementGUID", Value.fromBytes(value));
  }

  get agreementId(): BigInt {
    let value = this.get("agreementId");
    return value!.toBigInt();
  }

  set agreementId(value: BigInt) {
    this.set("agreementId", Value.fromBigInt(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get client(): Bytes {
    let value = this.get("client");
    return value!.toBytes();
  }

  set client(value: Bytes) {
    this.set("client", Value.fromBytes(value));
  }

  get contractURI(): string {
    let value = this.get("contractURI");
    return value!.toString();
  }

  set contractURI(value: string) {
    this.set("contractURI", Value.fromString(value));
  }

  get targetEndTimestamp(): BigInt {
    let value = this.get("targetEndTimestamp");
    return value!.toBigInt();
  }

  set targetEndTimestamp(value: BigInt) {
    this.set("targetEndTimestamp", Value.fromBigInt(value));
  }

  get streamToken(): Bytes {
    let value = this.get("streamToken");
    return value!.toBytes();
  }

  set streamToken(value: Bytes) {
    this.set("streamToken", Value.fromBytes(value));
  }

  get totalStreamedTokens(): BigInt {
    let value = this.get("totalStreamedTokens");
    return value!.toBigInt();
  }

  set totalStreamedTokens(value: BigInt) {
    this.set("totalStreamedTokens", Value.fromBigInt(value));
  }

  get terminationClauses_atWillDays(): i32 {
    let value = this.get("terminationClauses_atWillDays");
    return value!.toI32();
  }

  set terminationClauses_atWillDays(value: i32) {
    this.set("terminationClauses_atWillDays", Value.fromI32(value));
  }

  get terminationClauses_cureTimeDays(): i32 {
    let value = this.get("terminationClauses_cureTimeDays");
    return value!.toI32();
  }

  set terminationClauses_cureTimeDays(value: i32) {
    this.set("terminationClauses_cureTimeDays", Value.fromI32(value));
  }

  get terminationClauses_legalCompulsion(): boolean {
    let value = this.get("terminationClauses_legalCompulsion");
    return value!.toBoolean();
  }

  set terminationClauses_legalCompulsion(value: boolean) {
    this.set("terminationClauses_legalCompulsion", Value.fromBoolean(value));
  }

  get terminationClauses_moralTurpitude(): boolean {
    let value = this.get("terminationClauses_moralTurpitude");
    return value!.toBoolean();
  }

  set terminationClauses_moralTurpitude(value: boolean) {
    this.set("terminationClauses_moralTurpitude", Value.fromBoolean(value));
  }

  get terminationClauses_bankruptcyDissolutionInsolvency(): boolean {
    let value = this.get("terminationClauses_bankruptcyDissolutionInsolvency");
    return value!.toBoolean();
  }

  set terminationClauses_bankruptcyDissolutionInsolvency(value: boolean) {
    this.set(
      "terminationClauses_bankruptcyDissolutionInsolvency",
      Value.fromBoolean(value)
    );
  }

  get terminationClauses_counterpartyMalfeasance(): boolean {
    let value = this.get("terminationClauses_counterpartyMalfeasance");
    return value!.toBoolean();
  }

  set terminationClauses_counterpartyMalfeasance(value: boolean) {
    this.set(
      "terminationClauses_counterpartyMalfeasance",
      Value.fromBoolean(value)
    );
  }

  get terminationClauses_lostControlOfPrivateKeys(): boolean {
    let value = this.get("terminationClauses_lostControlOfPrivateKeys");
    return value!.toBoolean();
  }

  set terminationClauses_lostControlOfPrivateKeys(value: boolean) {
    this.set(
      "terminationClauses_lostControlOfPrivateKeys",
      Value.fromBoolean(value)
    );
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Agreement extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Agreement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Agreement must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Agreement", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Agreement | null {
    return changetype<Agreement | null>(
      store.get("Agreement", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get agreementGUID(): Bytes {
    let value = this.get("agreementGUID");
    return value!.toBytes();
  }

  set agreementGUID(value: Bytes) {
    this.set("agreementGUID", Value.fromBytes(value));
  }

  get agreementId(): BigInt {
    let value = this.get("agreementId");
    return value!.toBigInt();
  }

  set agreementId(value: BigInt) {
    this.set("agreementId", Value.fromBigInt(value));
  }

  get provider(): Bytes {
    let value = this.get("provider");
    return value!.toBytes();
  }

  set provider(value: Bytes) {
    this.set("provider", Value.fromBytes(value));
  }

  get client(): Bytes {
    let value = this.get("client");
    return value!.toBytes();
  }

  set client(value: Bytes) {
    this.set("client", Value.fromBytes(value));
  }

  get currentProposal(): Bytes {
    let value = this.get("currentProposal");
    return value!.toBytes();
  }

  set currentProposal(value: Bytes) {
    this.set("currentProposal", Value.fromBytes(value));
  }

  get allProposals(): Array<Bytes> {
    let value = this.get("allProposals");
    return value!.toBytesArray();
  }

  set allProposals(value: Array<Bytes>) {
    this.set("allProposals", Value.fromBytesArray(value));
  }

  get lastProposer(): Bytes {
    let value = this.get("lastProposer");
    return value!.toBytes();
  }

  set lastProposer(value: Bytes) {
    this.set("lastProposer", Value.fromBytes(value));
  }
}
